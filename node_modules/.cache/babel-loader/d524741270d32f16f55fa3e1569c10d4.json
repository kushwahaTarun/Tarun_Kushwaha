{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tarun kushwaha\\\\reacttut\\\\awesomeapp\\\\src\\\\Context.jsx\";\nimport React, { createContext } from \"react\";\nimport Child1 from \"./Child1\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\"; //Context App ?\n// This is the alternative to \"prop drilling\" or moving props from grandparent to child to parent, and so on. Context is also touted as an easier, lighter approach to\n// state management using Redux.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst firstName = /*#__PURE__*/createContext();\n\nconst Context = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(firstName.Provider, {\n      value: \"tarun\",\n      children: /*#__PURE__*/_jsxDEV(Child1, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = Context;\nexport default Context;\nexport { firstName };\n\nvar _c;\n\n$RefreshReg$(_c, \"Context\");","map":{"version":3,"sources":["C:/Users/Tarun kushwaha/reacttut/awesomeapp/src/Context.jsx"],"names":["React","createContext","Child1","firstName","Context"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,sDAAP,C,CAEA;AAEA;AACA;;;;AAEA,MAAMC,SAAS,gBAAGF,aAAa,EAA/B;;AAEA,MAAMG,OAAO,GAAG,MAAM;AACpB,sBACE;AAAA,2BACE,QAAC,SAAD,CAAW,QAAX;AAAoB,MAAA,KAAK,EAAI,OAA7B;AAAA,6BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAOD,CARD;;KAAMA,O;AAUN,eAAeA,OAAf;AACA,SAAQD,SAAR","sourcesContent":["import React, { createContext } from \"react\";\r\nimport Child1 from \"./Child1\";\r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n//Context App ?\r\n\r\n// This is the alternative to \"prop drilling\" or moving props from grandparent to child to parent, and so on. Context is also touted as an easier, lighter approach to\r\n// state management using Redux.\r\n\r\nconst firstName = createContext();\r\n\r\nconst Context = () => {\r\n  return (\r\n    <>\r\n      <firstName.Provider value = {\"tarun\"}>\r\n        <Child1 />\r\n      </firstName.Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Context;\r\nexport {firstName};\r\n"]},"metadata":{},"sourceType":"module"}